{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","defaultProps","about","TextForm","useState","text","setText","style","color","heading","placeholder","onChange","e","target","value","rows","toUpperCase","showAlert","toLowerCase","count","char","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","trim","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91a89376.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">\r\n                  {props.about}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                onClick={props.toggleMode}\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\n//it sets the type of props that we pass\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired, //isrequired: this field is required\r\n  about: PropTypes.string,\r\n};\r\n\r\n//it sets the default props, if we don't pass anything\r\nNavbar.defaultProps = {\r\n  title: \"Set title\",\r\n  about: \"Set about us\",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n    //text = \"new text\"  //wrong way to change the text\r\n    //setText(\"new text\") //correct way\r\n\r\n    const handleUpClick = () => {\r\n        setText(text.toUpperCase());\r\n        text && props.showAlert(\"Converted to Uppercase\", \"success\");\r\n   }\r\n    const handleLoClick = () => {\r\n        setText(text.toLowerCase());\r\n        text && props.showAlert(\"Converted to Lowercase\", \"success\");\r\n\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n        text && props.showAlert(\"Text is Cleared\", \"success\");\r\n    }\r\n\r\n    const handleVowelsClick = () => {\r\n        let count = 0;\r\n        for (let char of text) {\r\n            if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u')\r\n                count++;\r\n        }\r\n        if (count === 0)\r\n            return;\r\n        setText(`Total vowels in '${text}' are ${count}`);\r\n        text && props.showAlert(\"Counted the Vowels\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n        setText(e.target.value);          \r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        text && props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        text && props.showAlert(\"Extra spaces Removed\", \"success\");\r\n\r\n    }\r\n    \r\n    return (\r\n          <>\r\n        <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" placeholder=\"Text here\" onChange={handleOnChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n                <button className='btn btn-primary mx-1' onClick={handleUpClick} >Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick} >Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleVowelsClick} >Count Vowels</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n          </div>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Text Summary</h2>\r\n                <p> {text.length>0 ? text.trim().split(\" \").length : 0} words and {text.length} characters</p>\r\n                <p> {text.length>0 ? text.trim().split(\" \").length*0.008 : 0} minutes</p>\r\n                <h4>Preview</h4>\r\n                <p>{text.length>0?text:\"Enter the text above to preview\"}</p>\r\n            <p></p>    \r\n            </div>\r\n        </>    \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n    props.alert &&\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{ capitalize(props.alert.type)}: </strong> {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");  //enable or disable dark mode\n  const [alert, setAlert] = useState(null);  //to set alert msg\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#071f44\";\n      showAlert(\"Dark Mode is Enabled\", \"success\");\n    \n    }\n    \n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode is Enabled\", \"success\");\n\n    }\n  };\n\n  return (\n  <>\n    {/* <Router> */}\n      {/* all components */}\n      \n        <Navbar title=\"TextUtils\" about=\"About Us\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert} />\n      {/* // <Switch> */}\n        {/* // <Route exact path='/'> */}\n          <TextForm heading=\"Enter the text to Analyze below\" mode={mode} showAlert={showAlert} />\n        {/* // </Route> */}\n        {/* // <Route exact path='/About'>\n        //   <About mode={mode} />\n        // </Route> */}\n      {/* </Switch> */}\n    {/* // </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}